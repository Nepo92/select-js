const getTemplate=(e,t,s)=>{let i=e??"";const l=t.map(e=>(e.id===s&&(i=e.value),`<li tabindex="0" class="select__item" data-type='item' data-id='${e.id}'>${e.value}</li>`));return`\n    <div tabindex="0" class="select__input" data-type='input'>\n      <span class="select__placeholder" data-type='value'>${i}</span>\n      <i class="fas fa-angle-up"></i>\n    </div>\n    <ul class="select__body">\n      ${l.join("")}\n    </ul>\n  `};export default class select{constructor(e,t){this.select=document.querySelector(e),this.options=t,this.selectedId=t.selectedId,this.render(),this.setup()}render(){const{placeholder:e,data:t}=this.options;this.select.classList.add("select"),this.select.innerHTML=getTemplate(e,t,this.selectedId)}setup(){this.clickHandler=this.clickHandler.bind(this),this.select.addEventListener("click",this.clickHandler),this.angle=this.select.querySelector(".fa-angle-up"),this.value=this.select.querySelector('[data-type="value"]'),document.body.addEventListener("click",e=>{e.target.classList.contains("select__input")||e.target.classList.contains("select__item")||this.close()})}clickHandler(e){const{type:t}=e.target.dataset;if("input"===t)this.toggle();else if("item"===t){const t=e.target.dataset.id;this.selected(t),this.close()}}get current(){return this.options.data.find(e=>e.id===this.selectedId)}selected(e){this.selectedId=e,this.value.textContent=this.current.value}get isOpen(){return this.select.classList.contains("is-opened")}toggle(){this.isOpen?this.close():this.open()}open(){this.select.classList.add("is-opened"),this.angle.classList.remove("fa-angle-up"),this.angle.classList.add("fa-angle-down")}close(){this.select.classList.remove("is-opened"),this.angle.classList.remove("fa-angle-down"),this.angle.classList.add("fa-angle-up")}destroy(){this.select.removeEventListener("click",this.clickHandler)}}